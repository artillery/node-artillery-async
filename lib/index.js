// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  exports.barrier = function(count, finalCallback) {
    if (count === 0) {
      return finalCallback();
    }
    return function() {
      count--;
      if (count === 0) {
        return finalCallback();
      }
    };
  };

  exports.series = function(steps, finalCallback) {
    var index, processNextStep;
    index = 0;
    processNextStep = function(lastArgs) {
      var callback, finalArgs, nextArgs;
      if (lastArgs == null) {
        lastArgs = [];
      }
      if (steps[index] == null) {
        finalArgs = [null].concat(lastArgs);
        if (finalCallback != null) {
          finalCallback.apply(null, finalArgs);
        }
        return;
      }
      callback = function() {
        var args, err;
        err = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (err != null) {
          if (typeof finalCallback === "function") {
            finalCallback(err);
          }
        } else {
          processNextStep(args);
        }
      };
      nextArgs = lastArgs.concat(callback);
      steps[index++].apply(null, nextArgs);
    };
    processNextStep();
  };

  exports.parallel = function(steps, finalCallback) {
    var barrier, count, errors, i, len, step;
    if (steps.length === 0) {
      if (typeof finalCallback === "function") {
        finalCallback(null);
      }
      return;
    }
    errors = [];
    count = steps.length;
    barrier = function(err) {
      if ((err != null) && count >= 0) {
        count = -1;
        if (typeof finalCallback === "function") {
          finalCallback(err);
        }
      } else {
        count--;
        if (count === 0) {
          if (typeof finalCallback === "function") {
            finalCallback(null);
          }
        }
      }
    };
    for (i = 0, len = steps.length; i < len; i++) {
      step = steps[i];
      step(barrier);
    }
  };

  exports["while"] = function(condition, iterator, finalCallback) {
    var process;
    process = function() {
      var callback;
      if (!condition()) {
        if (typeof finalCallback === "function") {
          finalCallback(null);
        }
        return;
      }
      callback = function(err) {
        if (err != null) {
          if (typeof finalCallback === "function") {
            finalCallback(err);
          }
        } else {
          process();
        }
      };
      iterator(callback);
    };
    process();
  };

  exports.forEachSeries = function(array, iterator, finalCallback) {
    var arrayIterator, condition, index, length;
    index = 0;
    length = array.length;
    condition = function() {
      return index < length;
    };
    arrayIterator = function(cb) {
      iterator(array[index++], cb);
    };
    exports["while"](condition, arrayIterator, finalCallback);
  };

  exports.forEachParallel = function(array, iterator, limit, finalCallback) {
    var done, errors, inFlight, index, next;
    if (finalCallback == null) {
      finalCallback = limit;
      limit = Infinity;
    }
    if (!array.length) {
      return finalCallback(null);
    }
    errors = [];
    inFlight = index = 0;
    done = function(err) {
      if (err) {
        errors.push(err);
      }
      inFlight--;
      if (inFlight === 0 && index >= array.length) {
        return finalCallback(errors.length ? errors : null);
      } else {
        return next();
      }
    };
    next = function() {
      var results;
      results = [];
      while (inFlight < limit && index < array.length) {
        inFlight++;
        results.push(iterator(array[index++], done));
      }
      return results;
    };
    next();
  };

}).call(this);
